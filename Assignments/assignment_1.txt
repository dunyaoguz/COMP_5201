Name: Hugo JONCOUR                                     ID: 40139230

COMP5201                       Assignment 1                          Fall 2020
Issued: September 15, 2020                             Due: September 29, 2020
Submit electronically.  No extension will be granted. 

1. [16 marks] Amdahl's Law.

a) On a uniprocessor, serial portion A of program P consumes x% of the time,
while parallel portion B consumes the remaining (100 - x)%.  On a parallel
computer, portion A speeds up by a factor of 1.5, while portion B speeds up
by the number of processors.  The theoretical maximum speedup is 200 times.
How many real processors are needed to achieve at least 75% of the maximum
speedup?  How many real processors are needed to achieve at least 90% of
the maximum speedup?
________________________________

Theoretical max speed is 200 times:
=> Serial portion is 1/200 = 0.5 but Portion A speeds up by 1.5: 1.5*0.5 = 0.75
=> Serial portion is 0.75 <=> Parallel portion is 100 - 0.75 = 99.25
________________________________

75% of max speed is 0.75*200 = 150
Solve equation 150 = 100/((0.75/1.5)+((100-0.75)/n))
n = 595.5 => number of cores is 596
________________________________

 - at least 75% of the maximum speedup:               P = 596 processors
________________________________

90% of max speed is 0.90*200 = 180
Solve equation 180 = 100/((0.75/1.5)+((100-0.75)/n))
n = 1786.5 => number of cores is 1787
________________________________

 - at least 90% of the maximum speedup:               P = 1787 processors

b) Portion A of program P takes 'x' seconds; portion B takes 'y' seconds.
'x + y = 100'.  A is wholly sequential, while B is wholly parallel.  With
an infinite number of processors, we get a speedup of 's'.  It takes 7 1/3
imaginary processors (8 real processors) to achieve a speedup of at least
's/2'.  What are the values of 'x' and 'y'?  (They are integers).
________________________________
We have:
	x + y = 100
	speedup is given by p = (x + y)/(x+(y/p)) where p is the number of processors
We know that:
	(x + y)/(x + (y/(7+1/3)) = s/2

	(x + y)/x ~ s

if we solve the equation 
	2 (x + y)/(x + (y/(7+1/3)) = (x + y)/x 
	
	for x + y = 100 we get the solution x = 12 & y = 88
________________________________
                                                               (x,y)  = (12,88)
2. [16 marks] Performance and Power Efficiency.

A heterogeneous multicore chip adapts to the particular requirements by
turning on a certain number of each of its two classes of core.  Alpha cores
generate 14 GFs/s and dissipate 2 W (watts) of power.  Beta cores generate
1 GF/s and dissipate 0.1 W.  We seek to maximize aggregate chip performance
while still achieving a power efficiency of at least 7.39 GFs/s/W.
Electrical considerations dictate that precisely 500 cores be turned on.
a) Indicate the number of cores turned on.
________________________________

x: alpha cores
y: beta cores
E: efficiency
We have x + y = 500

E is given by equation:
	(14x + y)/(2x + 0.1y) = 7.39
    <=>	(14x + y)/(2x + 0.1y) = 739/100
    <=>	100(14x + y) = 739(2x + 0.1y)
    Solving the equations gives:
				x = 125.36
				y = 374.64
________________________________
                                          125 alpha cores, 375 beta cores

b) What is chip peak performance and chip power dissipation?
________________________________

We have 7.39 GFs/Watts

TFs = (125*14) + (375*1) = 2125 GFs

Watts = (125*2) + (375*0.1) = 285.5 Watts
________________________________
                                                         2.125 TFs/s, 285.5 W

3. [20 marks] MIPS Assembly Language.

Consider the C++ program fragment:

 for( j=0; j<n; j++ ) {sum+= a[j] * b[n-j-1];}

which performs a computation on two floating-point arrays of size 'n'.
Rewrite this fragment in MIPS assembly language.  Take n = 32.  Use 'f0'
initialized to zero as 'sum'.  The address of 'a[0]' is 1024.  The address
of 'b[0]' is 2048.  Set 'r1' to the address of 'a[0]'.  Set 'r2' to the
address of 'b[n-1]'.  Set 'r3' to the byte address immediately following
the end of array 'a'.  Use only the following instructions.

set   f6,0.0      // set 'f6' to 0.0
set   r1,n        // set 'r1' to n
l.d   f6,n(r2)    // load into 'f6' eight bytes starting at Mem[r2+n]
mul.d f4,f0,f2    // put the product 'f0 * f2' into 'f4'
add.d f4,f0,f2    // put the sum 'f0 + f2' into 'f4'
addi  r1,r1,n     // add integer 'n' to 'r1'
subi  r1,r1,n     // subtract integer 'n' from 'r1'
bne   r1,r2,loop  // if 'r1 /= r2' then goto 'loop'

________________________________

Answer:

set     f0, 0.0 		// set 'f0' to 0.0
set     r1, 1024 		// set register 1 r1 to beginning of array (a) at byte address 1024
set     r2, 2048 		// set register 2 r2 to beingging of array (b) at byte address 2048
addi    r2, r2, 248 		// n-1 is the 31st element; a floating point integer is 8 bytes, we need to set the pointer to 2048 + (31x8)
addi    r3, r1, 256 		// set r3 to the end of array (a) which is 1024 + (32x8)

loop:   
	l.d f4, 0(r1) 		// get value of a[j]
	l.d f6, 0(r2) 		// get value of b[n-j-1] or b[31] in the first iteration
	mul.d   f2, f4, f6 	// sum = a[j] * b[n-j-1] into f2
	add.d f0, f0, f2 	// old sum += sum from loop
	addi r1, 8 		// bump a[0] to next value in array, or next 8 bytes to a[1]
	subi r2, 8 		// decrease b[31] to b[30], or 8 previous bytes 
	bne r1, r3, loop 	// when r1 == r3, we know we reached the end of array (a) and exit the loop
________________________________


4. [16 marks] Dealing with Overhead.

Consider two generations of bandwith support to nearby memory for a
multicore CPU.  In the first generation, there are 28 Gbs/s of bandwidth to
nearby memory.  In the second generation, there are 256 GBs/s of bandwidth
to nearby memory.  There is a GPU accelerator.  The total time for an RPC
call-work-and-return from the GPU is 4 * 10^-7 s.  A core has 128 64-bit
registers.  Define the cost of a context switch from CPU thread t1 to CPU
thread t2 as four times the cost of moving the register-file contents out
of, or into, the processor.  For each generation, should a thread making
an RPC on the GPU a) spin wait, or b) context switch?  Explain.

Hint: When a thread makes an RPC on a GPU, it is like a regular procedure
call in that the thread may not go on to its next instruction until the
RPC returns.  Imagine that there is some completely separate control
system that synchronizes CPU (actually, core) and GPU; don't even think
about this!  While thread t1 is waiting for the RPC to return, it has a
choice between two options.  It can either spin, doing no useful work, or
it can context switch to thread t2, hoping that thread t2 can do some
useful work while thread t1 is waiting.  You must find the intelligent
option for thread t1 in each of the two generations. 

________________________________

Time for a context switch: t
Bandwidth: b

time = 4*(cost of moving the register file content into/out of the CPU)

there are 128*64-bit registers 
	=> 128(2^7)* 2^3 
	=  2^10 bytes

first gen:
	b 	= 28 GB/s
	time 	= 2^10/(28*10^9)
		= 3.657 × 10^-8
	cost	= 4(3.657 × 10^-8) = 1.4628*10^-6
		= 0.0000014628

4*3.6571 × 10^-8 > 4 * 10^-7
We prefer a RPC to a context switch in this case

second gen:
	b 	= 256 GB/s
	cost	= 2^10/(256*10^9) 
		= 4*10^-9
		= 0.000000004
total cost	= 4*0.000000004
		= 0.000000016

0.000000016 < 4 * 10^-7

We also prefer a context switch to a RPC
________________________________

5. [12 marks] Address-register Sizes.

An n-bit register can hold 2^n distinct bit patterns.  As such, it can only
be used to address a memory whose number of addressable units (typically,
bytes) is less than or equal to 2^n.  In what follows, use the power-of-two
interpretation of Greek prefixes.  I.e., K = 2^10, M = 2^20, etc.  In this
question, register bit sizes need not be a power of two.

a) What is the minimum size of an address register for a computer with 8 GBs
of memory?
________________________________

1GB = 2^30 bytes
=> 8GB = 8*2^30 bytes
       = 8 589 934 592 bytes
log_base_2(8 589 934 592) = 33
________________________________
                                                        answer = 33 bits
b) What is the minimum size of an address register for a computer with 35 TBs
of memory?
________________________________

1TB = 2^40 bytes
=> 35TB = 35*2^40 bytes
       	= 38 482 906 972 160 bytes
log_base_2(38 482 906 972 160) = 45.129
Not an integer value so we have to round it up to 46			       
________________________________
                                                        answer = 46 bits
c) What is the minimum size of an address register for a computer with 1.05
EBs of memory?
________________________________

1EB = 2^60 bytes
=> 1.05EB = 1.05*2^60 bytes
log_base_2(1.05*2^60) = 60.07
Not an integer value so we have to round it up to 61			       
________________________________
                                                        answer = 61 bits
d) What is the minimum size of an address register for a computer with 0.5
(1/2) EB of memory?
________________________________

1EB = 2^60 bytes
0.5*2^60 = 1*2^59
=> 0.5 EB = 2^59 bytes
log_base_2(2^59) = 59
Not an integer value so we have to round it up to 61			       
________________________________
                                                        answer = 59 bits
6. [20 marks] Utility-Cost Tradeoffs

A single NEC SX-9 vector processor unit (VPU) has a peak arithmetic
performance of 102.4 GFs/s.  The memory system supplies a peak memory
bandwidth of 162 GBs/s.  The VPU dissipates 40 W, while the memory system
dissipates 55 W.  Together, both components dissipate 95 W.  Every program
has some arithmetic intensity (ai), measured in flops/byte, that indicates
how much performance is achievable for a given bandwidth.  The equation is:
achievable GFs/s = min{ai*bw, peak GFs/s}.  (For this question, pretend a
memory system comes with interconnect included).

a) What is the minimum ai that achieves peak arithmetic performance on an
SX-9 VPU?
________________________________

Arithmetic Performance as AP, Arithmetic Intensity as AI and Bandwith as B:
AI = AP/B
AI = 102.4/162 = 0.632 
________________________________
	                                             ai = 0.632 flops/byte

b) What is the power efficiency of this computer system at peak performance?
________________________________

Power Efficiency as PE :
PE = AP/W = 102.4/95 = 1.078
________________________________
                                                      pe = 1.078 GFs/s/W

c) A special customer buys two memory systems for the one VPU, thus doubling
both the peak bandwidth and the power dissipated by the memory.  What is the
new minimum ai that achieves peak arithmetic performance?
________________________________

Just like for the previous answer (a):
AI = AP/B
if AI' = AP/B' and B' = 2B:
AI' = AB/(B*2)
AI' = 102.4/(162*2) = 102.4/324 = 0.316 (is equal to AI/2)
________________________________
                                                      ai = 0.316 flops/byte

d) What is the power efficiency of the new system at peak performance?
________________________________

We have a new Power Intensity: 
=> PE': 
		PE' = AP'/W'
		AP' = AI' * B'
AI' = 0.316
=> AP' = 0.316*324 = 102.384

W' = 40 + 55*2 = 150

PE' = 102.384/150 = 0.68256
________________________________
                                                      pe = 0.68256 GFs/s/W

e) Since higher power efficiency is a good thing, why would a customer spend
more money to get less of it?
________________________________

Increasing Arithmetical Intensity requires a higher Arithmetical Performance
and/or a bigger Bandwidth. It may be a decision to 'sacrifice' power efficiency
just to increase Arithemetical Intensity without having to replace every component,
but only the bottleneck ones (here, the bandwidth).
________________________________
